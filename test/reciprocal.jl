# From https://github.com/unkcpz/LibSymspg.jl/blob/53d2f6d/test/test_api.jl#L89-L99
@testset "Test reciprocal mesh using the example from `LibSymspg.jl`" begin
    lattice = [
        -2.0 2.0 2.0
        2.0 -2.0 2.0
        2.0 2.0 -2.0
    ]
    positions = [[0.0, 0.0, 0.0]]
    atoms = [1]
    mesh = [4, 4, 4]
    is_shift = falses(3)
    cell = Cell(lattice, positions, atoms)
    result = get_ir_reciprocal_mesh(
        cell, mesh, 1e-5; is_time_reversal=true, is_shift=is_shift
    )
    @test length(unique(result.ir_mapping_table)) == 8
end

# See https://spglib.github.io/spglib/python-spglib.html
@testset "Python example" begin
    lattice = [[0.0, 0.5, 0.5], [0.5, 0.0, 0.5], [0.5, 0.5, 0.0]] * 5.4
    positions = [[0.875, 0.875, 0.875], [0.125, 0.125, 0.125]]
    atoms = [1, 1]
    cell = Cell(lattice, positions, atoms)
    mesh = [8, 8, 8]
    @testset "No shifts" begin
        is_shift = [0, 0, 0]
        result = get_ir_reciprocal_mesh(
            cell, mesh, 1e-5; is_time_reversal=true, is_shift=is_shift
        )
        python_mapping = [
            0,
            1,
            2,
            3,
            4,
            3,
            2,
            1,
            1,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            2,
            10,
            18,
            19,
            20,
            21,
            22,
            14,
            3,
            11,
            19,
            27,
            28,
            29,
            21,
            13,
            4,
            12,
            20,
            28,
            36,
            28,
            20,
            12,
            3,
            13,
            21,
            29,
            28,
            27,
            19,
            11,
            2,
            14,
            22,
            21,
            20,
            19,
            18,
            10,
            1,
            15,
            14,
            13,
            12,
            11,
            10,
            9,
            1,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            9,
            1,
            15,
            14,
            13,
            12,
            11,
            10,
            10,
            15,
            10,
            83,
            84,
            85,
            84,
            83,
            11,
            14,
            83,
            19,
            92,
            93,
            94,
            84,
            12,
            13,
            84,
            92,
            28,
            101,
            93,
            85,
            13,
            12,
            85,
            93,
            101,
            28,
            92,
            84,
            14,
            11,
            84,
            94,
            93,
            92,
            19,
            83,
            15,
            10,
            83,
            84,
            85,
            84,
            83,
            10,
            2,
            10,
            18,
            19,
            20,
            21,
            22,
            14,
            10,
            15,
            10,
            83,
            84,
            85,
            84,
            83,
            18,
            10,
            2,
            14,
            22,
            21,
            20,
            19,
            19,
            83,
            14,
            11,
            84,
            94,
            93,
            92,
            20,
            84,
            22,
            84,
            20,
            93,
            166,
            93,
            21,
            85,
            21,
            94,
            93,
            29,
            93,
            94,
            22,
            84,
            20,
            93,
            166,
            93,
            20,
            84,
            14,
            83,
            19,
            92,
            93,
            94,
            84,
            11,
            3,
            11,
            19,
            27,
            28,
            29,
            21,
            13,
            11,
            14,
            83,
            19,
            92,
            93,
            94,
            84,
            19,
            83,
            14,
            11,
            84,
            94,
            93,
            92,
            27,
            19,
            11,
            3,
            13,
            21,
            29,
            28,
            28,
            92,
            84,
            13,
            12,
            85,
            93,
            101,
            29,
            93,
            94,
            21,
            85,
            21,
            94,
            93,
            21,
            94,
            93,
            29,
            93,
            94,
            21,
            85,
            13,
            84,
            92,
            28,
            101,
            93,
            85,
            12,
            4,
            12,
            20,
            28,
            36,
            28,
            20,
            12,
            12,
            13,
            84,
            92,
            28,
            101,
            93,
            85,
            20,
            84,
            22,
            84,
            20,
            93,
            166,
            93,
            28,
            92,
            84,
            13,
            12,
            85,
            93,
            101,
            36,
            28,
            20,
            12,
            4,
            12,
            20,
            28,
            28,
            101,
            93,
            85,
            12,
            13,
            84,
            92,
            20,
            93,
            166,
            93,
            20,
            84,
            22,
            84,
            12,
            85,
            93,
            101,
            28,
            92,
            84,
            13,
            3,
            13,
            21,
            29,
            28,
            27,
            19,
            11,
            13,
            12,
            85,
            93,
            101,
            28,
            92,
            84,
            21,
            85,
            21,
            94,
            93,
            29,
            93,
            94,
            29,
            93,
            94,
            21,
            85,
            21,
            94,
            93,
            28,
            101,
            93,
            85,
            12,
            13,
            84,
            92,
            27,
            28,
            29,
            21,
            13,
            3,
            11,
            19,
            19,
            92,
            93,
            94,
            84,
            11,
            14,
            83,
            11,
            84,
            94,
            93,
            92,
            19,
            83,
            14,
            2,
            14,
            22,
            21,
            20,
            19,
            18,
            10,
            14,
            11,
            84,
            94,
            93,
            92,
            19,
            83,
            22,
            84,
            20,
            93,
            166,
            93,
            20,
            84,
            21,
            94,
            93,
            29,
            93,
            94,
            21,
            85,
            20,
            93,
            166,
            93,
            20,
            84,
            22,
            84,
            19,
            92,
            93,
            94,
            84,
            11,
            14,
            83,
            18,
            19,
            20,
            21,
            22,
            14,
            2,
            10,
            10,
            83,
            84,
            85,
            84,
            83,
            10,
            15,
            1,
            15,
            14,
            13,
            12,
            11,
            10,
            9,
            15,
            10,
            83,
            84,
            85,
            84,
            83,
            10,
            14,
            83,
            19,
            92,
            93,
            94,
            84,
            11,
            13,
            84,
            92,
            28,
            101,
            93,
            85,
            12,
            12,
            85,
            93,
            101,
            28,
            92,
            84,
            13,
            11,
            84,
            94,
            93,
            92,
            19,
            83,
            14,
            10,
            83,
            84,
            85,
            84,
            83,
            10,
            15,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            1,
        ]
        @test result.ir_mapping_table == python_mapping .+ 1
        @test length(unique(result.ir_mapping_table)) == 29
        # Irreducible k-points
        python_results = [
            [0.0, 0.0, 0.0],
            [0.125, 0.0, 0.0],
            [0.25, 0.0, 0.0],
            [0.375, 0.0, 0.0],
            [0.5, 0.0, 0.0],
            [0.125, 0.125, 0.0],
            [0.25, 0.125, 0.0],
            [0.375, 0.125, 0.0],
            [0.5, 0.125, 0.0],
            [-0.375, 0.125, 0.0],
            [-0.25, 0.125, 0.0],
            [-0.125, 0.125, 0.0],
            [0.25, 0.25, 0.0],
            [0.375, 0.25, 0.0],
            [0.5, 0.25, 0.0],
            [-0.375, 0.25, 0.0],
            [-0.25, 0.25, 0.0],
            [0.375, 0.375, 0.0],
            [0.5, 0.375, 0.0],
            [-0.375, 0.375, 0.0],
            [0.5, 0.5, 0.0],
            [0.375, 0.25, 0.125],
            [0.5, 0.25, 0.125],
            [-0.375, 0.25, 0.125],
            [0.5, 0.375, 0.125],
            [-0.375, 0.375, 0.125],
            [-0.25, 0.375, 0.125],
            [-0.375, 0.5, 0.125],
            [-0.25, 0.5, 0.25],
        ]
        @test collect(eachpoint(result, true)) == python_results
        @test length(collect(eachpoint(result, false))) == 512
    end
    @testset "With shifts" begin
        is_shift = [1, 1, 1]
        result = get_ir_reciprocal_mesh(
            cell, mesh, 1e-5; is_time_reversal=true, is_shift=is_shift
        )
        python_mapping = [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            1,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            2,
            10,
            18,
            19,
            20,
            21,
            22,
            23,
            3,
            11,
            19,
            27,
            28,
            29,
            30,
            31,
            4,
            12,
            20,
            28,
            36,
            37,
            38,
            31,
            5,
            13,
            21,
            29,
            37,
            45,
            46,
            23,
            6,
            14,
            22,
            30,
            38,
            46,
            54,
            15,
            7,
            15,
            23,
            31,
            31,
            23,
            15,
            7,
            1,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            9,
            73,
            74,
            75,
            76,
            77,
            78,
            54,
            10,
            74,
            82,
            83,
            84,
            85,
            86,
            46,
            11,
            75,
            83,
            91,
            92,
            93,
            94,
            38,
            12,
            76,
            84,
            92,
            100,
            101,
            94,
            30,
            13,
            77,
            85,
            93,
            101,
            109,
            86,
            22,
            14,
            78,
            86,
            94,
            94,
            86,
            78,
            14,
            15,
            54,
            46,
            38,
            30,
            22,
            14,
            6,
            2,
            10,
            18,
            19,
            20,
            21,
            22,
            23,
            10,
            74,
            82,
            83,
            84,
            85,
            86,
            46,
            18,
            82,
            146,
            147,
            148,
            149,
            109,
            45,
            19,
            83,
            147,
            155,
            156,
            157,
            101,
            37,
            20,
            84,
            148,
            156,
            164,
            157,
            93,
            29,
            21,
            85,
            149,
            157,
            157,
            149,
            85,
            21,
            22,
            86,
            109,
            101,
            93,
            85,
            77,
            13,
            23,
            46,
            45,
            37,
            29,
            21,
            13,
            5,
            3,
            11,
            19,
            27,
            28,
            29,
            30,
            31,
            11,
            75,
            83,
            91,
            92,
            93,
            94,
            38,
            19,
            83,
            147,
            155,
            156,
            157,
            101,
            37,
            27,
            91,
            155,
            219,
            220,
            164,
            100,
            36,
            28,
            92,
            156,
            220,
            220,
            156,
            92,
            28,
            29,
            93,
            157,
            164,
            156,
            148,
            84,
            20,
            30,
            94,
            101,
            100,
            92,
            84,
            76,
            12,
            31,
            38,
            37,
            36,
            28,
            20,
            12,
            4,
            4,
            12,
            20,
            28,
            36,
            37,
            38,
            31,
            12,
            76,
            84,
            92,
            100,
            101,
            94,
            30,
            20,
            84,
            148,
            156,
            164,
            157,
            93,
            29,
            28,
            92,
            156,
            220,
            220,
            156,
            92,
            28,
            36,
            100,
            164,
            220,
            219,
            155,
            91,
            27,
            37,
            101,
            157,
            156,
            155,
            147,
            83,
            19,
            38,
            94,
            93,
            92,
            91,
            83,
            75,
            11,
            31,
            30,
            29,
            28,
            27,
            19,
            11,
            3,
            5,
            13,
            21,
            29,
            37,
            45,
            46,
            23,
            13,
            77,
            85,
            93,
            101,
            109,
            86,
            22,
            21,
            85,
            149,
            157,
            157,
            149,
            85,
            21,
            29,
            93,
            157,
            164,
            156,
            148,
            84,
            20,
            37,
            101,
            157,
            156,
            155,
            147,
            83,
            19,
            45,
            109,
            149,
            148,
            147,
            146,
            82,
            18,
            46,
            86,
            85,
            84,
            83,
            82,
            74,
            10,
            23,
            22,
            21,
            20,
            19,
            18,
            10,
            2,
            6,
            14,
            22,
            30,
            38,
            46,
            54,
            15,
            14,
            78,
            86,
            94,
            94,
            86,
            78,
            14,
            22,
            86,
            109,
            101,
            93,
            85,
            77,
            13,
            30,
            94,
            101,
            100,
            92,
            84,
            76,
            12,
            38,
            94,
            93,
            92,
            91,
            83,
            75,
            11,
            46,
            86,
            85,
            84,
            83,
            82,
            74,
            10,
            54,
            78,
            77,
            76,
            75,
            74,
            73,
            9,
            15,
            14,
            13,
            12,
            11,
            10,
            9,
            1,
            7,
            15,
            23,
            31,
            31,
            23,
            15,
            7,
            15,
            54,
            46,
            38,
            30,
            22,
            14,
            6,
            23,
            46,
            45,
            37,
            29,
            21,
            13,
            5,
            31,
            38,
            37,
            36,
            28,
            20,
            12,
            4,
            31,
            30,
            29,
            28,
            27,
            19,
            11,
            3,
            23,
            22,
            21,
            20,
            19,
            18,
            10,
            2,
            15,
            14,
            13,
            12,
            11,
            10,
            9,
            1,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            0,
        ]
        @test result.ir_mapping_table == python_mapping .+ 1
        @test length(unique(result.ir_mapping_table)) == 60
        # Irreducible k-points
        python_results = [
            [0.0625, 0.0625, 0.0625],
            [0.1875, 0.0625, 0.0625],
            [0.3125, 0.0625, 0.0625],
            [0.4375, 0.0625, 0.0625],
            [0.5625, 0.0625, 0.0625],
            [-0.3125, 0.0625, 0.0625],
            [-0.1875, 0.0625, 0.0625],
            [-0.0625, 0.0625, 0.0625],
            [0.1875, 0.1875, 0.0625],
            [0.3125, 0.1875, 0.0625],
            [0.4375, 0.1875, 0.0625],
            [0.5625, 0.1875, 0.0625],
            [-0.3125, 0.1875, 0.0625],
            [-0.1875, 0.1875, 0.0625],
            [-0.0625, 0.1875, 0.0625],
            [0.3125, 0.3125, 0.0625],
            [0.4375, 0.3125, 0.0625],
            [0.5625, 0.3125, 0.0625],
            [-0.3125, 0.3125, 0.0625],
            [-0.1875, 0.3125, 0.0625],
            [-0.0625, 0.3125, 0.0625],
            [0.4375, 0.4375, 0.0625],
            [0.5625, 0.4375, 0.0625],
            [-0.3125, 0.4375, 0.0625],
            [-0.1875, 0.4375, 0.0625],
            [-0.0625, 0.4375, 0.0625],
            [0.5625, 0.5625, 0.0625],
            [-0.3125, 0.5625, 0.0625],
            [-0.1875, 0.5625, 0.0625],
            [-0.3125, -0.3125, 0.0625],
            [-0.1875, -0.3125, 0.0625],
            [-0.1875, -0.1875, 0.0625],
            [0.1875, 0.1875, 0.1875],
            [0.3125, 0.1875, 0.1875],
            [0.4375, 0.1875, 0.1875],
            [0.5625, 0.1875, 0.1875],
            [-0.3125, 0.1875, 0.1875],
            [-0.1875, 0.1875, 0.1875],
            [0.3125, 0.3125, 0.1875],
            [0.4375, 0.3125, 0.1875],
            [0.5625, 0.3125, 0.1875],
            [-0.3125, 0.3125, 0.1875],
            [-0.1875, 0.3125, 0.1875],
            [0.4375, 0.4375, 0.1875],
            [0.5625, 0.4375, 0.1875],
            [-0.3125, 0.4375, 0.1875],
            [-0.1875, 0.4375, 0.1875],
            [0.5625, 0.5625, 0.1875],
            [-0.3125, 0.5625, 0.1875],
            [-0.3125, -0.3125, 0.1875],
            [0.3125, 0.3125, 0.3125],
            [0.4375, 0.3125, 0.3125],
            [0.5625, 0.3125, 0.3125],
            [-0.3125, 0.3125, 0.3125],
            [0.4375, 0.4375, 0.3125],
            [0.5625, 0.4375, 0.3125],
            [-0.3125, 0.4375, 0.3125],
            [0.5625, 0.5625, 0.3125],
            [0.4375, 0.4375, 0.4375],
            [0.5625, 0.4375, 0.4375],
        ]
        @test collect(eachpoint(result, true)) == python_results
        @test length(collect(eachpoint(result, false))) == 512
    end
end

# Example from https://github.com/spglib/spglib/blob/v2.1.0-rc2/example/python_api/example_full.py#L85-L96
@testset "Test rutile structure" begin
    lattice = [
        4 0 0
        0 4 0
        0 0 3
    ]
    positions = [
        [0.0, 0.0, 0.0],
        [0.5, 0.5, 0.5],
        [0.3, 0.3, 0.0],
        [0.7, 0.7, 0.0],
        [0.2, 0.8, 0.5],
        [0.8, 0.2, 0.5],
    ]
    atoms = [14, 14, 8, 8, 8, 8]
    cell = Cell(lattice, positions, atoms)
    @testset "No shift" begin
        is_shift = [0, 0, 0]
        mesh = [6, 6, 6]
        result = get_ir_reciprocal_mesh(cell, mesh, 1e-5; is_time_reversal=true)
        @test length(unique(result.ir_mapping_table)) == 40
        @test result.ir_mapping_table ==
            [
            0,
            1,
            2,
            3,
            2,
            1,
            1,
            7,
            8,
            9,
            8,
            7,
            2,
            8,
            14,
            15,
            14,
            8,
            3,
            9,
            15,
            21,
            15,
            9,
            2,
            8,
            14,
            15,
            14,
            8,
            1,
            7,
            8,
            9,
            8,
            7,
            36,
            37,
            38,
            39,
            38,
            37,
            37,
            43,
            44,
            45,
            44,
            43,
            38,
            44,
            50,
            51,
            50,
            44,
            39,
            45,
            51,
            57,
            51,
            45,
            38,
            44,
            50,
            51,
            50,
            44,
            37,
            43,
            44,
            45,
            44,
            43,
            72,
            73,
            74,
            75,
            74,
            73,
            73,
            79,
            80,
            81,
            80,
            79,
            74,
            80,
            86,
            87,
            86,
            80,
            75,
            81,
            87,
            93,
            87,
            81,
            74,
            80,
            86,
            87,
            86,
            80,
            73,
            79,
            80,
            81,
            80,
            79,
            108,
            109,
            110,
            111,
            110,
            109,
            109,
            115,
            116,
            117,
            116,
            115,
            110,
            116,
            122,
            123,
            122,
            116,
            111,
            117,
            123,
            129,
            123,
            117,
            110,
            116,
            122,
            123,
            122,
            116,
            109,
            115,
            116,
            117,
            116,
            115,
            72,
            73,
            74,
            75,
            74,
            73,
            73,
            79,
            80,
            81,
            80,
            79,
            74,
            80,
            86,
            87,
            86,
            80,
            75,
            81,
            87,
            93,
            87,
            81,
            74,
            80,
            86,
            87,
            86,
            80,
            73,
            79,
            80,
            81,
            80,
            79,
            36,
            37,
            38,
            39,
            38,
            37,
            37,
            43,
            44,
            45,
            44,
            43,
            38,
            44,
            50,
            51,
            50,
            44,
            39,
            45,
            51,
            57,
            51,
            45,
            38,
            44,
            50,
            51,
            50,
            44,
            37,
            43,
            44,
            45,
            44,
            43,
        ] .+ 1  # Compared with Python results
        @test collect(eachpoint(result, true)) ≈ [
            [0.0, 0.0, 0.0],
            [0.16666667, 0.0, 0.0],
            [0.33333333, 0.0, 0.0],
            [0.5, 0.0, 0.0],
            [0.16666667, 0.16666667, 0.0],
            [0.33333333, 0.16666667, 0.0],
            [0.5, 0.16666667, 0.0],
            [0.33333333, 0.33333333, 0.0],
            [0.5, 0.33333333, 0.0],
            [0.5, 0.5, 0.0],
            [0.0, 0.0, 0.16666667],
            [0.16666667, 0.0, 0.16666667],
            [0.33333333, 0.0, 0.16666667],
            [0.5, 0.0, 0.16666667],
            [0.16666667, 0.16666667, 0.16666667],
            [0.33333333, 0.16666667, 0.16666667],
            [0.5, 0.16666667, 0.16666667],
            [0.33333333, 0.33333333, 0.16666667],
            [0.5, 0.33333333, 0.16666667],
            [0.5, 0.5, 0.16666667],
            [0.0, 0.0, 0.33333333],
            [0.16666667, 0.0, 0.33333333],
            [0.33333333, 0.0, 0.33333333],
            [0.5, 0.0, 0.33333333],
            [0.16666667, 0.16666667, 0.33333333],
            [0.33333333, 0.16666667, 0.33333333],
            [0.5, 0.16666667, 0.33333333],
            [0.33333333, 0.33333333, 0.33333333],
            [0.5, 0.33333333, 0.33333333],
            [0.5, 0.5, 0.33333333],
            [0.0, 0.0, 0.5],
            [0.16666667, 0.0, 0.5],
            [0.33333333, 0.0, 0.5],
            [0.5, 0.0, 0.5],
            [0.16666667, 0.16666667, 0.5],
            [0.33333333, 0.16666667, 0.5],
            [0.5, 0.16666667, 0.5],
            [0.33333333, 0.33333333, 0.5],
            [0.5, 0.33333333, 0.5],
            [0.5, 0.5, 0.5],
        ]  # Compared with Python results
        @test collect(eachpoint(result, false)) ≈ [
            [0.0, 0.0, 0.0],
            [0.16666667, 0.0, 0.0],
            [0.33333333, 0.0, 0.0],
            [0.5, 0.0, 0.0],
            [-0.33333333, 0.0, 0.0],
            [-0.16666667, 0.0, 0.0],
            [0.0, 0.16666667, 0.0],
            [0.16666667, 0.16666667, 0.0],
            [0.33333333, 0.16666667, 0.0],
            [0.5, 0.16666667, 0.0],
            [-0.33333333, 0.16666667, 0.0],
            [-0.16666667, 0.16666667, 0.0],
            [0.0, 0.33333333, 0.0],
            [0.16666667, 0.33333333, 0.0],
            [0.33333333, 0.33333333, 0.0],
            [0.5, 0.33333333, 0.0],
            [-0.33333333, 0.33333333, 0.0],
            [-0.16666667, 0.33333333, 0.0],
            [0.0, 0.5, 0.0],
            [0.16666667, 0.5, 0.0],
            [0.33333333, 0.5, 0.0],
            [0.5, 0.5, 0.0],
            [-0.33333333, 0.5, 0.0],
            [-0.16666667, 0.5, 0.0],
            [0.0, -0.33333333, 0.0],
            [0.16666667, -0.33333333, 0.0],
            [0.33333333, -0.33333333, 0.0],
            [0.5, -0.33333333, 0.0],
            [-0.33333333, -0.33333333, 0.0],
            [-0.16666667, -0.33333333, 0.0],
            [0.0, -0.16666667, 0.0],
            [0.16666667, -0.16666667, 0.0],
            [0.33333333, -0.16666667, 0.0],
            [0.5, -0.16666667, 0.0],
            [-0.33333333, -0.16666667, 0.0],
            [-0.16666667, -0.16666667, 0.0],
            [0.0, 0.0, 0.16666667],
            [0.16666667, 0.0, 0.16666667],
            [0.33333333, 0.0, 0.16666667],
            [0.5, 0.0, 0.16666667],
            [-0.33333333, 0.0, 0.16666667],
            [-0.16666667, 0.0, 0.16666667],
            [0.0, 0.16666667, 0.16666667],
            [0.16666667, 0.16666667, 0.16666667],
            [0.33333333, 0.16666667, 0.16666667],
            [0.5, 0.16666667, 0.16666667],
            [-0.33333333, 0.16666667, 0.16666667],
            [-0.16666667, 0.16666667, 0.16666667],
            [0.0, 0.33333333, 0.16666667],
            [0.16666667, 0.33333333, 0.16666667],
            [0.33333333, 0.33333333, 0.16666667],
            [0.5, 0.33333333, 0.16666667],
            [-0.33333333, 0.33333333, 0.16666667],
            [-0.16666667, 0.33333333, 0.16666667],
            [0.0, 0.5, 0.16666667],
            [0.16666667, 0.5, 0.16666667],
            [0.33333333, 0.5, 0.16666667],
            [0.5, 0.5, 0.16666667],
            [-0.33333333, 0.5, 0.16666667],
            [-0.16666667, 0.5, 0.16666667],
            [0.0, -0.33333333, 0.16666667],
            [0.16666667, -0.33333333, 0.16666667],
            [0.33333333, -0.33333333, 0.16666667],
            [0.5, -0.33333333, 0.16666667],
            [-0.33333333, -0.33333333, 0.16666667],
            [-0.16666667, -0.33333333, 0.16666667],
            [0.0, -0.16666667, 0.16666667],
            [0.16666667, -0.16666667, 0.16666667],
            [0.33333333, -0.16666667, 0.16666667],
            [0.5, -0.16666667, 0.16666667],
            [-0.33333333, -0.16666667, 0.16666667],
            [-0.16666667, -0.16666667, 0.16666667],
            [0.0, 0.0, 0.33333333],
            [0.16666667, 0.0, 0.33333333],
            [0.33333333, 0.0, 0.33333333],
            [0.5, 0.0, 0.33333333],
            [-0.33333333, 0.0, 0.33333333],
            [-0.16666667, 0.0, 0.33333333],
            [0.0, 0.16666667, 0.33333333],
            [0.16666667, 0.16666667, 0.33333333],
            [0.33333333, 0.16666667, 0.33333333],
            [0.5, 0.16666667, 0.33333333],
            [-0.33333333, 0.16666667, 0.33333333],
            [-0.16666667, 0.16666667, 0.33333333],
            [0.0, 0.33333333, 0.33333333],
            [0.16666667, 0.33333333, 0.33333333],
            [0.33333333, 0.33333333, 0.33333333],
            [0.5, 0.33333333, 0.33333333],
            [-0.33333333, 0.33333333, 0.33333333],
            [-0.16666667, 0.33333333, 0.33333333],
            [0.0, 0.5, 0.33333333],
            [0.16666667, 0.5, 0.33333333],
            [0.33333333, 0.5, 0.33333333],
            [0.5, 0.5, 0.33333333],
            [-0.33333333, 0.5, 0.33333333],
            [-0.16666667, 0.5, 0.33333333],
            [0.0, -0.33333333, 0.33333333],
            [0.16666667, -0.33333333, 0.33333333],
            [0.33333333, -0.33333333, 0.33333333],
            [0.5, -0.33333333, 0.33333333],
            [-0.33333333, -0.33333333, 0.33333333],
            [-0.16666667, -0.33333333, 0.33333333],
            [0.0, -0.16666667, 0.33333333],
            [0.16666667, -0.16666667, 0.33333333],
            [0.33333333, -0.16666667, 0.33333333],
            [0.5, -0.16666667, 0.33333333],
            [-0.33333333, -0.16666667, 0.33333333],
            [-0.16666667, -0.16666667, 0.33333333],
            [0.0, 0.0, 0.5],
            [0.16666667, 0.0, 0.5],
            [0.33333333, 0.0, 0.5],
            [0.5, 0.0, 0.5],
            [-0.33333333, 0.0, 0.5],
            [-0.16666667, 0.0, 0.5],
            [0.0, 0.16666667, 0.5],
            [0.16666667, 0.16666667, 0.5],
            [0.33333333, 0.16666667, 0.5],
            [0.5, 0.16666667, 0.5],
            [-0.33333333, 0.16666667, 0.5],
            [-0.16666667, 0.16666667, 0.5],
            [0.0, 0.33333333, 0.5],
            [0.16666667, 0.33333333, 0.5],
            [0.33333333, 0.33333333, 0.5],
            [0.5, 0.33333333, 0.5],
            [-0.33333333, 0.33333333, 0.5],
            [-0.16666667, 0.33333333, 0.5],
            [0.0, 0.5, 0.5],
            [0.16666667, 0.5, 0.5],
            [0.33333333, 0.5, 0.5],
            [0.5, 0.5, 0.5],
            [-0.33333333, 0.5, 0.5],
            [-0.16666667, 0.5, 0.5],
            [0.0, -0.33333333, 0.5],
            [0.16666667, -0.33333333, 0.5],
            [0.33333333, -0.33333333, 0.5],
            [0.5, -0.33333333, 0.5],
            [-0.33333333, -0.33333333, 0.5],
            [-0.16666667, -0.33333333, 0.5],
            [0.0, -0.16666667, 0.5],
            [0.16666667, -0.16666667, 0.5],
            [0.33333333, -0.16666667, 0.5],
            [0.5, -0.16666667, 0.5],
            [-0.33333333, -0.16666667, 0.5],
            [-0.16666667, -0.16666667, 0.5],
            [0.0, 0.0, -0.33333333],
            [0.16666667, 0.0, -0.33333333],
            [0.33333333, 0.0, -0.33333333],
            [0.5, 0.0, -0.33333333],
            [-0.33333333, 0.0, -0.33333333],
            [-0.16666667, 0.0, -0.33333333],
            [0.0, 0.16666667, -0.33333333],
            [0.16666667, 0.16666667, -0.33333333],
            [0.33333333, 0.16666667, -0.33333333],
            [0.5, 0.16666667, -0.33333333],
            [-0.33333333, 0.16666667, -0.33333333],
            [-0.16666667, 0.16666667, -0.33333333],
            [0.0, 0.33333333, -0.33333333],
            [0.16666667, 0.33333333, -0.33333333],
            [0.33333333, 0.33333333, -0.33333333],
            [0.5, 0.33333333, -0.33333333],
            [-0.33333333, 0.33333333, -0.33333333],
            [-0.16666667, 0.33333333, -0.33333333],
            [0.0, 0.5, -0.33333333],
            [0.16666667, 0.5, -0.33333333],
            [0.33333333, 0.5, -0.33333333],
            [0.5, 0.5, -0.33333333],
            [-0.33333333, 0.5, -0.33333333],
            [-0.16666667, 0.5, -0.33333333],
            [0.0, -0.33333333, -0.33333333],
            [0.16666667, -0.33333333, -0.33333333],
            [0.33333333, -0.33333333, -0.33333333],
            [0.5, -0.33333333, -0.33333333],
            [-0.33333333, -0.33333333, -0.33333333],
            [-0.16666667, -0.33333333, -0.33333333],
            [0.0, -0.16666667, -0.33333333],
            [0.16666667, -0.16666667, -0.33333333],
            [0.33333333, -0.16666667, -0.33333333],
            [0.5, -0.16666667, -0.33333333],
            [-0.33333333, -0.16666667, -0.33333333],
            [-0.16666667, -0.16666667, -0.33333333],
            [0.0, 0.0, -0.16666667],
            [0.16666667, 0.0, -0.16666667],
            [0.33333333, 0.0, -0.16666667],
            [0.5, 0.0, -0.16666667],
            [-0.33333333, 0.0, -0.16666667],
            [-0.16666667, 0.0, -0.16666667],
            [0.0, 0.16666667, -0.16666667],
            [0.16666667, 0.16666667, -0.16666667],
            [0.33333333, 0.16666667, -0.16666667],
            [0.5, 0.16666667, -0.16666667],
            [-0.33333333, 0.16666667, -0.16666667],
            [-0.16666667, 0.16666667, -0.16666667],
            [0.0, 0.33333333, -0.16666667],
            [0.16666667, 0.33333333, -0.16666667],
            [0.33333333, 0.33333333, -0.16666667],
            [0.5, 0.33333333, -0.16666667],
            [-0.33333333, 0.33333333, -0.16666667],
            [-0.16666667, 0.33333333, -0.16666667],
            [0.0, 0.5, -0.16666667],
            [0.16666667, 0.5, -0.16666667],
            [0.33333333, 0.5, -0.16666667],
            [0.5, 0.5, -0.16666667],
            [-0.33333333, 0.5, -0.16666667],
            [-0.16666667, 0.5, -0.16666667],
            [0.0, -0.33333333, -0.16666667],
            [0.16666667, -0.33333333, -0.16666667],
            [0.33333333, -0.33333333, -0.16666667],
            [0.5, -0.33333333, -0.16666667],
            [-0.33333333, -0.33333333, -0.16666667],
            [-0.16666667, -0.33333333, -0.16666667],
            [0.0, -0.16666667, -0.16666667],
            [0.16666667, -0.16666667, -0.16666667],
            [0.33333333, -0.16666667, -0.16666667],
            [0.5, -0.16666667, -0.16666667],
            [-0.33333333, -0.16666667, -0.16666667],
            [-0.16666667, -0.16666667, -0.16666667],
        ]  # Compared with Python results
    end
    @testset "With shift" begin
        is_shift = trues(3)
        @testset "6×6×6" begin
            mesh = [6, 6, 6]
            result = get_ir_reciprocal_mesh(
                cell, mesh, 1e-5; is_time_reversal=true, is_shift=is_shift
            )
            @test length(unique(result.ir_mapping_table)) == 18
            @test collect(eachpoint(result, true)) ≈ [
                [0.08333333, 0.08333333, 0.08333333],
                [0.25, 0.08333333, 0.08333333],
                [0.41666667, 0.08333333, 0.08333333],
                [0.25, 0.25, 0.08333333],
                [0.41666667, 0.25, 0.08333333],
                [0.41666667, 0.41666667, 0.08333333],
                [0.08333333, 0.08333333, 0.25],
                [0.25, 0.08333333, 0.25],
                [0.41666667, 0.08333333, 0.25],
                [0.25, 0.25, 0.25],
                [0.41666667, 0.25, 0.25],
                [0.41666667, 0.41666667, 0.25],
                [0.08333333, 0.08333333, 0.41666667],
                [0.25, 0.08333333, 0.41666667],
                [0.41666667, 0.08333333, 0.41666667],
                [0.25, 0.25, 0.41666667],
                [0.41666667, 0.25, 0.41666667],
                [0.41666667, 0.41666667, 0.41666667],
            ]  # Compared with Python results
        end
        @testset "4×4×4" begin
            mesh = [4, 4, 4]
            result = get_ir_reciprocal_mesh(
                cell, mesh, 1e-5; is_time_reversal=true, is_shift=is_shift
            )
            @test length(unique(result.ir_mapping_table)) == 6
            @test collect(eachpoint(result, true)) == [
                [0.125, 0.125, 0.125],
                [0.375, 0.125, 0.125],
                [0.375, 0.375, 0.125],
                [0.125, 0.125, 0.375],
                [0.375, 0.125, 0.375],
                [0.375, 0.375, 0.375],
            ]  # Compared with Python results
            @test collect(eachpoint(result, false)) == [
                [0.125, 0.125, 0.125],
                [0.375, 0.125, 0.125],
                [0.625, 0.125, 0.125],
                [-0.125, 0.125, 0.125],
                [0.125, 0.375, 0.125],
                [0.375, 0.375, 0.125],
                [0.625, 0.375, 0.125],
                [-0.125, 0.375, 0.125],
                [0.125, 0.625, 0.125],
                [0.375, 0.625, 0.125],
                [0.625, 0.625, 0.125],
                [-0.125, 0.625, 0.125],
                [0.125, -0.125, 0.125],
                [0.375, -0.125, 0.125],
                [0.625, -0.125, 0.125],
                [-0.125, -0.125, 0.125],
                [0.125, 0.125, 0.375],
                [0.375, 0.125, 0.375],
                [0.625, 0.125, 0.375],
                [-0.125, 0.125, 0.375],
                [0.125, 0.375, 0.375],
                [0.375, 0.375, 0.375],
                [0.625, 0.375, 0.375],
                [-0.125, 0.375, 0.375],
                [0.125, 0.625, 0.375],
                [0.375, 0.625, 0.375],
                [0.625, 0.625, 0.375],
                [-0.125, 0.625, 0.375],
                [0.125, -0.125, 0.375],
                [0.375, -0.125, 0.375],
                [0.625, -0.125, 0.375],
                [-0.125, -0.125, 0.375],
                [0.125, 0.125, 0.625],
                [0.375, 0.125, 0.625],
                [0.625, 0.125, 0.625],
                [-0.125, 0.125, 0.625],
                [0.125, 0.375, 0.625],
                [0.375, 0.375, 0.625],
                [0.625, 0.375, 0.625],
                [-0.125, 0.375, 0.625],
                [0.125, 0.625, 0.625],
                [0.375, 0.625, 0.625],
                [0.625, 0.625, 0.625],
                [-0.125, 0.625, 0.625],
                [0.125, -0.125, 0.625],
                [0.375, -0.125, 0.625],
                [0.625, -0.125, 0.625],
                [-0.125, -0.125, 0.625],
                [0.125, 0.125, -0.125],
                [0.375, 0.125, -0.125],
                [0.625, 0.125, -0.125],
                [-0.125, 0.125, -0.125],
                [0.125, 0.375, -0.125],
                [0.375, 0.375, -0.125],
                [0.625, 0.375, -0.125],
                [-0.125, 0.375, -0.125],
                [0.125, 0.625, -0.125],
                [0.375, 0.625, -0.125],
                [0.625, 0.625, -0.125],
                [-0.125, 0.625, -0.125],
                [0.125, -0.125, -0.125],
                [0.375, -0.125, -0.125],
                [0.625, -0.125, -0.125],
                [-0.125, -0.125, -0.125],
            ]  # Compared with Python results
        end
        @testset "5×5×5" begin
            mesh = [5, 5, 5]
            result = get_ir_reciprocal_mesh(
                cell, mesh, 1e-5; is_time_reversal=true, is_shift=is_shift
            )
            @test length(unique(result.ir_mapping_table)) == 18
            @test collect(eachpoint(result, true)) == [
                [0.1, 0.1, 0.1],
                [0.3, 0.1, 0.1],
                [0.5, 0.1, 0.1],
                [0.3, 0.3, 0.1],
                [0.5, 0.3, 0.1],
                [0.5, 0.5, 0.1],
                [0.1, 0.1, 0.3],
                [0.3, 0.1, 0.3],
                [0.5, 0.1, 0.3],
                [0.3, 0.3, 0.3],
                [0.5, 0.3, 0.3],
                [0.5, 0.5, 0.3],
                [0.1, 0.1, 0.5],
                [0.3, 0.1, 0.5],
                [0.5, 0.1, 0.5],
                [0.3, 0.3, 0.5],
                [0.5, 0.3, 0.5],
                [0.5, 0.5, 0.5],
            ]  # Compared with Python results
            @test collect(eachpoint(result, false)) == [
                [0.1, 0.1, 0.1],
                [0.3, 0.1, 0.1],
                [0.5, 0.1, 0.1],
                [-0.3, 0.1, 0.1],
                [-0.1, 0.1, 0.1],
                [0.1, 0.3, 0.1],
                [0.3, 0.3, 0.1],
                [0.5, 0.3, 0.1],
                [-0.3, 0.3, 0.1],
                [-0.1, 0.3, 0.1],
                [0.1, 0.5, 0.1],
                [0.3, 0.5, 0.1],
                [0.5, 0.5, 0.1],
                [-0.3, 0.5, 0.1],
                [-0.1, 0.5, 0.1],
                [0.1, -0.3, 0.1],
                [0.3, -0.3, 0.1],
                [0.5, -0.3, 0.1],
                [-0.3, -0.3, 0.1],
                [-0.1, -0.3, 0.1],
                [0.1, -0.1, 0.1],
                [0.3, -0.1, 0.1],
                [0.5, -0.1, 0.1],
                [-0.3, -0.1, 0.1],
                [-0.1, -0.1, 0.1],
                [0.1, 0.1, 0.3],
                [0.3, 0.1, 0.3],
                [0.5, 0.1, 0.3],
                [-0.3, 0.1, 0.3],
                [-0.1, 0.1, 0.3],
                [0.1, 0.3, 0.3],
                [0.3, 0.3, 0.3],
                [0.5, 0.3, 0.3],
                [-0.3, 0.3, 0.3],
                [-0.1, 0.3, 0.3],
                [0.1, 0.5, 0.3],
                [0.3, 0.5, 0.3],
                [0.5, 0.5, 0.3],
                [-0.3, 0.5, 0.3],
                [-0.1, 0.5, 0.3],
                [0.1, -0.3, 0.3],
                [0.3, -0.3, 0.3],
                [0.5, -0.3, 0.3],
                [-0.3, -0.3, 0.3],
                [-0.1, -0.3, 0.3],
                [0.1, -0.1, 0.3],
                [0.3, -0.1, 0.3],
                [0.5, -0.1, 0.3],
                [-0.3, -0.1, 0.3],
                [-0.1, -0.1, 0.3],
                [0.1, 0.1, 0.5],
                [0.3, 0.1, 0.5],
                [0.5, 0.1, 0.5],
                [-0.3, 0.1, 0.5],
                [-0.1, 0.1, 0.5],
                [0.1, 0.3, 0.5],
                [0.3, 0.3, 0.5],
                [0.5, 0.3, 0.5],
                [-0.3, 0.3, 0.5],
                [-0.1, 0.3, 0.5],
                [0.1, 0.5, 0.5],
                [0.3, 0.5, 0.5],
                [0.5, 0.5, 0.5],
                [-0.3, 0.5, 0.5],
                [-0.1, 0.5, 0.5],
                [0.1, -0.3, 0.5],
                [0.3, -0.3, 0.5],
                [0.5, -0.3, 0.5],
                [-0.3, -0.3, 0.5],
                [-0.1, -0.3, 0.5],
                [0.1, -0.1, 0.5],
                [0.3, -0.1, 0.5],
                [0.5, -0.1, 0.5],
                [-0.3, -0.1, 0.5],
                [-0.1, -0.1, 0.5],
                [0.1, 0.1, -0.3],
                [0.3, 0.1, -0.3],
                [0.5, 0.1, -0.3],
                [-0.3, 0.1, -0.3],
                [-0.1, 0.1, -0.3],
                [0.1, 0.3, -0.3],
                [0.3, 0.3, -0.3],
                [0.5, 0.3, -0.3],
                [-0.3, 0.3, -0.3],
                [-0.1, 0.3, -0.3],
                [0.1, 0.5, -0.3],
                [0.3, 0.5, -0.3],
                [0.5, 0.5, -0.3],
                [-0.3, 0.5, -0.3],
                [-0.1, 0.5, -0.3],
                [0.1, -0.3, -0.3],
                [0.3, -0.3, -0.3],
                [0.5, -0.3, -0.3],
                [-0.3, -0.3, -0.3],
                [-0.1, -0.3, -0.3],
                [0.1, -0.1, -0.3],
                [0.3, -0.1, -0.3],
                [0.5, -0.1, -0.3],
                [-0.3, -0.1, -0.3],
                [-0.1, -0.1, -0.3],
                [0.1, 0.1, -0.1],
                [0.3, 0.1, -0.1],
                [0.5, 0.1, -0.1],
                [-0.3, 0.1, -0.1],
                [-0.1, 0.1, -0.1],
                [0.1, 0.3, -0.1],
                [0.3, 0.3, -0.1],
                [0.5, 0.3, -0.1],
                [-0.3, 0.3, -0.1],
                [-0.1, 0.3, -0.1],
                [0.1, 0.5, -0.1],
                [0.3, 0.5, -0.1],
                [0.5, 0.5, -0.1],
                [-0.3, 0.5, -0.1],
                [-0.1, 0.5, -0.1],
                [0.1, -0.3, -0.1],
                [0.3, -0.3, -0.1],
                [0.5, -0.3, -0.1],
                [-0.3, -0.3, -0.1],
                [-0.1, -0.3, -0.1],
                [0.1, -0.1, -0.1],
                [0.3, -0.1, -0.1],
                [0.5, -0.1, -0.1],
                [-0.3, -0.1, -0.1],
                [-0.1, -0.1, -0.1],
            ]  # Compared with Python results
        end
        @testset "8×8×8" begin  # See https://github.com/spglib/spglib/blob/d8c39f6/example/python_api/example_full.py#L268-L273
            mesh = [8, 8, 8]
            result = get_ir_reciprocal_mesh(
                cell, mesh, 1e-5; is_time_reversal=true, is_shift=is_shift
            )
            @test length(unique(result.ir_mapping_table)) == 40  # Number of irreducible k-points
        end
    end
end

@testset "Test distorted silicon structure" begin
    lattice = [
        4.01 0 0
        0 4 0
        0 0 3.99
    ]
    positions = [
        0.001 0 0
        0 0.5 0.5
        0.5 0 0.5
        0.5 0.5 0
        0.25 0.25 0.251
        0.25 0.75 0.75
        0.75 0.25 0.75
        0.75 0.75 0.25
    ]
    atoms = [14, 14, 14, 14, 14, 14, 14, 14]
    cell = Cell(lattice, positions, atoms)
    mesh = [6, 6, 6]
    result = get_ir_reciprocal_mesh(cell, mesh, 1e-5; is_time_reversal=true)
    @test length(unique(result.ir_mapping_table)) == 112
    @test collect(eachpoint(result, true)) ≈ [
        [0.0, 0.0, 0.0],
        [0.16666667, 0.0, 0.0],
        [0.33333333, 0.0, 0.0],
        [0.5, 0.0, 0.0],
        [0.0, 0.16666667, 0.0],
        [0.16666667, 0.16666667, 0.0],
        [0.33333333, 0.16666667, 0.0],
        [0.5, 0.16666667, 0.0],
        [-0.33333333, 0.16666667, 0.0],
        [-0.16666667, 0.16666667, 0.0],
        [0.0, 0.33333333, 0.0],
        [0.16666667, 0.33333333, 0.0],
        [0.33333333, 0.33333333, 0.0],
        [0.5, 0.33333333, 0.0],
        [-0.33333333, 0.33333333, 0.0],
        [-0.16666667, 0.33333333, 0.0],
        [0.0, 0.5, 0.0],
        [0.16666667, 0.5, 0.0],
        [0.33333333, 0.5, 0.0],
        [0.5, 0.5, 0.0],
        [0.0, 0.0, 0.16666667],
        [0.16666667, 0.0, 0.16666667],
        [0.33333333, 0.0, 0.16666667],
        [0.5, 0.0, 0.16666667],
        [-0.33333333, 0.0, 0.16666667],
        [-0.16666667, 0.0, 0.16666667],
        [0.0, 0.16666667, 0.16666667],
        [0.16666667, 0.16666667, 0.16666667],
        [0.33333333, 0.16666667, 0.16666667],
        [0.5, 0.16666667, 0.16666667],
        [-0.33333333, 0.16666667, 0.16666667],
        [-0.16666667, 0.16666667, 0.16666667],
        [0.0, 0.33333333, 0.16666667],
        [0.16666667, 0.33333333, 0.16666667],
        [0.33333333, 0.33333333, 0.16666667],
        [0.5, 0.33333333, 0.16666667],
        [-0.33333333, 0.33333333, 0.16666667],
        [-0.16666667, 0.33333333, 0.16666667],
        [0.0, 0.5, 0.16666667],
        [0.16666667, 0.5, 0.16666667],
        [0.33333333, 0.5, 0.16666667],
        [0.5, 0.5, 0.16666667],
        [-0.33333333, 0.5, 0.16666667],
        [-0.16666667, 0.5, 0.16666667],
        [0.0, -0.33333333, 0.16666667],
        [0.16666667, -0.33333333, 0.16666667],
        [0.33333333, -0.33333333, 0.16666667],
        [0.5, -0.33333333, 0.16666667],
        [-0.33333333, -0.33333333, 0.16666667],
        [-0.16666667, -0.33333333, 0.16666667],
        [0.0, -0.16666667, 0.16666667],
        [0.16666667, -0.16666667, 0.16666667],
        [0.33333333, -0.16666667, 0.16666667],
        [0.5, -0.16666667, 0.16666667],
        [-0.33333333, -0.16666667, 0.16666667],
        [-0.16666667, -0.16666667, 0.16666667],
        [0.0, 0.0, 0.33333333],
        [0.16666667, 0.0, 0.33333333],
        [0.33333333, 0.0, 0.33333333],
        [0.5, 0.0, 0.33333333],
        [-0.33333333, 0.0, 0.33333333],
        [-0.16666667, 0.0, 0.33333333],
        [0.0, 0.16666667, 0.33333333],
        [0.16666667, 0.16666667, 0.33333333],
        [0.33333333, 0.16666667, 0.33333333],
        [0.5, 0.16666667, 0.33333333],
        [-0.33333333, 0.16666667, 0.33333333],
        [-0.16666667, 0.16666667, 0.33333333],
        [0.0, 0.33333333, 0.33333333],
        [0.16666667, 0.33333333, 0.33333333],
        [0.33333333, 0.33333333, 0.33333333],
        [0.5, 0.33333333, 0.33333333],
        [-0.33333333, 0.33333333, 0.33333333],
        [-0.16666667, 0.33333333, 0.33333333],
        [0.0, 0.5, 0.33333333],
        [0.16666667, 0.5, 0.33333333],
        [0.33333333, 0.5, 0.33333333],
        [0.5, 0.5, 0.33333333],
        [-0.33333333, 0.5, 0.33333333],
        [-0.16666667, 0.5, 0.33333333],
        [0.0, -0.33333333, 0.33333333],
        [0.16666667, -0.33333333, 0.33333333],
        [0.33333333, -0.33333333, 0.33333333],
        [0.5, -0.33333333, 0.33333333],
        [-0.33333333, -0.33333333, 0.33333333],
        [-0.16666667, -0.33333333, 0.33333333],
        [0.0, -0.16666667, 0.33333333],
        [0.16666667, -0.16666667, 0.33333333],
        [0.33333333, -0.16666667, 0.33333333],
        [0.5, -0.16666667, 0.33333333],
        [-0.33333333, -0.16666667, 0.33333333],
        [-0.16666667, -0.16666667, 0.33333333],
        [0.0, 0.0, 0.5],
        [0.16666667, 0.0, 0.5],
        [0.33333333, 0.0, 0.5],
        [0.5, 0.0, 0.5],
        [0.0, 0.16666667, 0.5],
        [0.16666667, 0.16666667, 0.5],
        [0.33333333, 0.16666667, 0.5],
        [0.5, 0.16666667, 0.5],
        [-0.33333333, 0.16666667, 0.5],
        [-0.16666667, 0.16666667, 0.5],
        [0.0, 0.33333333, 0.5],
        [0.16666667, 0.33333333, 0.5],
        [0.33333333, 0.33333333, 0.5],
        [0.5, 0.33333333, 0.5],
        [-0.33333333, 0.33333333, 0.5],
        [-0.16666667, 0.33333333, 0.5],
        [0.0, 0.5, 0.5],
        [0.16666667, 0.5, 0.5],
        [0.33333333, 0.5, 0.5],
        [0.5, 0.5, 0.5],
    ]
end

# From https://github.com/spglib/spglib/blob/d8c39f6/example/python_api/example_full.py#L259-L266
@testset "Test the primitive cell of silicon" begin
    lattice = Lattice([[0, 2, 2], [2, 0, 2], [2, 2, 0]])
    positions = [[0, 0, 0], [0.25, 0.25, 0.25]]
    atoms = [14, 14]
    cell = Cell(lattice, positions, atoms)
    mesh = [11, 11, 11]
    result = get_ir_reciprocal_mesh(cell, mesh, 1e-5; is_time_reversal=true)
    @test length(unique(result.ir_mapping_table)) == 56  # Number of irreducible k-points
end

# Example from https://github.com/spglib/spglib/blob/v2.1.0-rc2/example/python_api/example_full.py#L111-L117
@testset "Test MgB₂ structure" begin
    a = 3.07
    c = 3.52
    lattice = [[a, 0, 0], [-a / 2, a / 2 * sqrt(3), 0], [0, 0, c]]
    positions = [[0, 0, 0], [1 / 3, 2 / 3, 1 / 2], [2 / 3, 1 / 3, 1 / 2]]
    atoms = [12, 5, 5]
    cell = Cell(lattice, positions, atoms)
    mesh = [7, 7, 7]
    result = get_ir_reciprocal_mesh(cell, mesh, 1e-5; is_time_reversal=true)
    @test length(result.ir_mapping_table) == 343
    @test length(unique(result.ir_mapping_table)) == 32
    @test collect(eachpoint(result, true)) ≈ [
        [0.0, 0.0, 0.0],
        [0.14285714, 0.0, 0.0],
        [0.28571429, 0.0, 0.0],
        [0.42857143, 0.0, 0.0],
        [0.14285714, 0.14285714, 0.0],
        [0.28571429, 0.14285714, 0.0],
        [0.42857143, 0.14285714, 0.0],
        [0.28571429, 0.28571429, 0.0],
        [0.0, 0.0, 0.14285714],
        [0.14285714, 0.0, 0.14285714],
        [0.28571429, 0.0, 0.14285714],
        [0.42857143, 0.0, 0.14285714],
        [0.14285714, 0.14285714, 0.14285714],
        [0.28571429, 0.14285714, 0.14285714],
        [0.42857143, 0.14285714, 0.14285714],
        [0.28571429, 0.28571429, 0.14285714],
        [0.0, 0.0, 0.28571429],
        [0.14285714, 0.0, 0.28571429],
        [0.28571429, 0.0, 0.28571429],
        [0.42857143, 0.0, 0.28571429],
        [0.14285714, 0.14285714, 0.28571429],
        [0.28571429, 0.14285714, 0.28571429],
        [0.42857143, 0.14285714, 0.28571429],
        [0.28571429, 0.28571429, 0.28571429],
        [0.0, 0.0, 0.42857143],
        [0.14285714, 0.0, 0.42857143],
        [0.28571429, 0.0, 0.42857143],
        [0.42857143, 0.0, 0.42857143],
        [0.14285714, 0.14285714, 0.42857143],
        [0.28571429, 0.14285714, 0.42857143],
        [0.42857143, 0.14285714, 0.42857143],
        [0.28571429, 0.28571429, 0.42857143],
    ]  # Compared with Python results
    @test length(collect(eachpoint(result, false))) == 343
    # From https://github.com/spglib/spglib/blob/d8c39f6/example/python_api/example_full.py#L275-L280
    @testset "Example from Python" begin
        mesh = [9, 9, 8]
        is_shift = [false, false, true]
        result = get_ir_reciprocal_mesh(
            cell, mesh, 1e-5; is_time_reversal=true, is_shift=is_shift
        )
        @test length(unique(result.ir_mapping_table)) == 48  # Number of irreducible k-points
        @test collect(eachpoint(result, true)) ≈ [
            [0.0, 0.0, 0.0625],
            [0.11111111, 0.0, 0.0625],
            [0.22222222, 0.0, 0.0625],
            [0.33333333, 0.0, 0.0625],
            [0.44444444, 0.0, 0.0625],
            [0.11111111, 0.11111111, 0.0625],
            [0.22222222, 0.11111111, 0.0625],
            [0.33333333, 0.11111111, 0.0625],
            [0.44444444, 0.11111111, 0.0625],
            [0.22222222, 0.22222222, 0.0625],
            [0.33333333, 0.22222222, 0.0625],
            [0.33333333, 0.33333333, 0.0625],
            [0.0, 0.0, 0.1875],
            [0.11111111, 0.0, 0.1875],
            [0.22222222, 0.0, 0.1875],
            [0.33333333, 0.0, 0.1875],
            [0.44444444, 0.0, 0.1875],
            [0.11111111, 0.11111111, 0.1875],
            [0.22222222, 0.11111111, 0.1875],
            [0.33333333, 0.11111111, 0.1875],
            [0.44444444, 0.11111111, 0.1875],
            [0.22222222, 0.22222222, 0.1875],
            [0.33333333, 0.22222222, 0.1875],
            [0.33333333, 0.33333333, 0.1875],
            [0.0, 0.0, 0.3125],
            [0.11111111, 0.0, 0.3125],
            [0.22222222, 0.0, 0.3125],
            [0.33333333, 0.0, 0.3125],
            [0.44444444, 0.0, 0.3125],
            [0.11111111, 0.11111111, 0.3125],
            [0.22222222, 0.11111111, 0.3125],
            [0.33333333, 0.11111111, 0.3125],
            [0.44444444, 0.11111111, 0.3125],
            [0.22222222, 0.22222222, 0.3125],
            [0.33333333, 0.22222222, 0.3125],
            [0.33333333, 0.33333333, 0.3125],
            [0.0, 0.0, 0.4375],
            [0.11111111, 0.0, 0.4375],
            [0.22222222, 0.0, 0.4375],
            [0.33333333, 0.0, 0.4375],
            [0.44444444, 0.0, 0.4375],
            [0.11111111, 0.11111111, 0.4375],
            [0.22222222, 0.11111111, 0.4375],
            [0.33333333, 0.11111111, 0.4375],
            [0.44444444, 0.11111111, 0.4375],
            [0.22222222, 0.22222222, 0.4375],
            [0.33333333, 0.22222222, 0.4375],
            [0.33333333, 0.33333333, 0.4375],
        ]  # Compared with Python results
        is_shift = [true, true, false]
        result = get_ir_reciprocal_mesh(
            cell, mesh, 1e-5; is_time_reversal=true, is_shift=is_shift
        )
        @test length(unique(result.ir_mapping_table)) == 125  # Number of irreducible k-points
        @test collect(eachpoint(result, true)) ≈ [
            [0.05555556, 0.05555556, 0.0],
            [0.16666667, 0.05555556, 0.0],
            [0.27777778, 0.05555556, 0.0],
            [0.38888889, 0.05555556, 0.0],
            [0.5, 0.05555556, 0.0],
            [-0.38888889, 0.05555556, 0.0],
            [-0.27777778, 0.05555556, 0.0],
            [-0.16666667, 0.05555556, 0.0],
            [-0.05555556, 0.05555556, 0.0],
            [0.16666667, 0.16666667, 0.0],
            [0.27777778, 0.16666667, 0.0],
            [0.38888889, 0.16666667, 0.0],
            [0.5, 0.16666667, 0.0],
            [-0.38888889, 0.16666667, 0.0],
            [-0.27777778, 0.16666667, 0.0],
            [-0.16666667, 0.16666667, 0.0],
            [0.27777778, 0.27777778, 0.0],
            [0.38888889, 0.27777778, 0.0],
            [0.5, 0.27777778, 0.0],
            [-0.38888889, 0.27777778, 0.0],
            [-0.27777778, 0.27777778, 0.0],
            [0.38888889, 0.38888889, 0.0],
            [0.5, 0.38888889, 0.0],
            [-0.38888889, 0.38888889, 0.0],
            [0.5, 0.5, 0.0],
            [0.05555556, 0.05555556, 0.125],
            [0.16666667, 0.05555556, 0.125],
            [0.27777778, 0.05555556, 0.125],
            [0.38888889, 0.05555556, 0.125],
            [0.5, 0.05555556, 0.125],
            [-0.38888889, 0.05555556, 0.125],
            [-0.27777778, 0.05555556, 0.125],
            [-0.16666667, 0.05555556, 0.125],
            [-0.05555556, 0.05555556, 0.125],
            [0.16666667, 0.16666667, 0.125],
            [0.27777778, 0.16666667, 0.125],
            [0.38888889, 0.16666667, 0.125],
            [0.5, 0.16666667, 0.125],
            [-0.38888889, 0.16666667, 0.125],
            [-0.27777778, 0.16666667, 0.125],
            [-0.16666667, 0.16666667, 0.125],
            [0.27777778, 0.27777778, 0.125],
            [0.38888889, 0.27777778, 0.125],
            [0.5, 0.27777778, 0.125],
            [-0.38888889, 0.27777778, 0.125],
            [-0.27777778, 0.27777778, 0.125],
            [0.38888889, 0.38888889, 0.125],
            [0.5, 0.38888889, 0.125],
            [-0.38888889, 0.38888889, 0.125],
            [0.5, 0.5, 0.125],
            [0.05555556, 0.05555556, 0.25],
            [0.16666667, 0.05555556, 0.25],
            [0.27777778, 0.05555556, 0.25],
            [0.38888889, 0.05555556, 0.25],
            [0.5, 0.05555556, 0.25],
            [-0.38888889, 0.05555556, 0.25],
            [-0.27777778, 0.05555556, 0.25],
            [-0.16666667, 0.05555556, 0.25],
            [-0.05555556, 0.05555556, 0.25],
            [0.16666667, 0.16666667, 0.25],
            [0.27777778, 0.16666667, 0.25],
            [0.38888889, 0.16666667, 0.25],
            [0.5, 0.16666667, 0.25],
            [-0.38888889, 0.16666667, 0.25],
            [-0.27777778, 0.16666667, 0.25],
            [-0.16666667, 0.16666667, 0.25],
            [0.27777778, 0.27777778, 0.25],
            [0.38888889, 0.27777778, 0.25],
            [0.5, 0.27777778, 0.25],
            [-0.38888889, 0.27777778, 0.25],
            [-0.27777778, 0.27777778, 0.25],
            [0.38888889, 0.38888889, 0.25],
            [0.5, 0.38888889, 0.25],
            [-0.38888889, 0.38888889, 0.25],
            [0.5, 0.5, 0.25],
            [0.05555556, 0.05555556, 0.375],
            [0.16666667, 0.05555556, 0.375],
            [0.27777778, 0.05555556, 0.375],
            [0.38888889, 0.05555556, 0.375],
            [0.5, 0.05555556, 0.375],
            [-0.38888889, 0.05555556, 0.375],
            [-0.27777778, 0.05555556, 0.375],
            [-0.16666667, 0.05555556, 0.375],
            [-0.05555556, 0.05555556, 0.375],
            [0.16666667, 0.16666667, 0.375],
            [0.27777778, 0.16666667, 0.375],
            [0.38888889, 0.16666667, 0.375],
            [0.5, 0.16666667, 0.375],
            [-0.38888889, 0.16666667, 0.375],
            [-0.27777778, 0.16666667, 0.375],
            [-0.16666667, 0.16666667, 0.375],
            [0.27777778, 0.27777778, 0.375],
            [0.38888889, 0.27777778, 0.375],
            [0.5, 0.27777778, 0.375],
            [-0.38888889, 0.27777778, 0.375],
            [-0.27777778, 0.27777778, 0.375],
            [0.38888889, 0.38888889, 0.375],
            [0.5, 0.38888889, 0.375],
            [-0.38888889, 0.38888889, 0.375],
            [0.5, 0.5, 0.375],
            [0.05555556, 0.05555556, 0.5],
            [0.16666667, 0.05555556, 0.5],
            [0.27777778, 0.05555556, 0.5],
            [0.38888889, 0.05555556, 0.5],
            [0.5, 0.05555556, 0.5],
            [-0.38888889, 0.05555556, 0.5],
            [-0.27777778, 0.05555556, 0.5],
            [-0.16666667, 0.05555556, 0.5],
            [-0.05555556, 0.05555556, 0.5],
            [0.16666667, 0.16666667, 0.5],
            [0.27777778, 0.16666667, 0.5],
            [0.38888889, 0.16666667, 0.5],
            [0.5, 0.16666667, 0.5],
            [-0.38888889, 0.16666667, 0.5],
            [-0.27777778, 0.16666667, 0.5],
            [-0.16666667, 0.16666667, 0.5],
            [0.27777778, 0.27777778, 0.5],
            [0.38888889, 0.27777778, 0.5],
            [0.5, 0.27777778, 0.5],
            [-0.38888889, 0.27777778, 0.5],
            [-0.27777778, 0.27777778, 0.5],
            [0.38888889, 0.38888889, 0.5],
            [0.5, 0.38888889, 0.5],
            [-0.38888889, 0.38888889, 0.5],
            [0.5, 0.5, 0.5],
        ]  # Compared with Python results
    end
end
